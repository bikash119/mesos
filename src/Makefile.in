# Makefile.

SHELL = '/bin/sh'

BINDIR = @top_builddir@/bin
LIBDIR = @top_builddir@/lib
CONFDIR = @top_builddir@/conf
DEPLOYDIR = @top_builddir@/deploy

CC = @CC@
CXX = @CXX@
SWIG = @SWIG@

CFLAGS = @CFLAGS@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@

OS_NAME = @OS_NAME@

JAVA_HOME = @JAVA_HOME@

PYTHON_HEADERS = @PYTHON_HEADERS@
PYTHON_LDFLAGS = @PYTHON_LDFLAGS@

WITH_WEBUI = @WITH_WEBUI@

WEBUI_CFLAGS = @WEBUI_CFLAGS@
WEBUI_CXXFLAGS = @WEBUI_CXXFLAGS@
WEBUI_LDFLAGS = @WEBUI_LDFLAGS@

WITH_ZOOKEEPER = @WITH_ZOOKEEPER@

WITH_INCLUDED_ZOOKEEPER = @WITH_INCLUDED_ZOOKEEPER@

LIBPROCESS = third_party/libprocess

LIBEV = $(LIBPROCESS)/third_party/libev-3.8

GLOG = third_party/glog-0.3.1

SQLITE = third_party/glog-0.3.1

ZOOKEEPER = third_party/zookeeper-3.3.1/src/c

# Ensure that we get better debugging info.
CFLAGS += -g
CXXFLAGS += -g

# Add source dir and build dir to CFLAGS and CXXFLAGS.
CFLAGS += -I@srcdir@ -I.
CXXFLAGS += -I@srcdir@ -I.

# Add include to CFLAGS and CXXFLAGS.
CFLAGS += -I@top_srcdir@/include
CXXFLAGS += -I@top_srcdir@/include

# Add boost to CFLAGS and CXXFLAGS.
CFLAGS += -I@top_srcdir@/third_party/boost-1.37.0
CXXFLAGS += -I@top_srcdir@/third_party/boost-1.37.0

# Add libprocess to CFLAGS, CXXFLAGS, and LDFLAGS.
CFLAGS += -I@top_srcdir@/$(LIBPROCESS)
CXXFLAGS += -I@top_srcdir@/$(LIBPROCESS)
LDFLAGS += -L@top_builddir@/$(LIBPROCESS)

# Add libev to LDFLAGS.
LDFLAGS += -L@top_builddir@/$(LIBEV)/.libs

# Add glog to include and lib paths.
CXXFLAGS += -I@top_srcdir@/$(GLOG)/src -I@top_builddir@/$(GLOG)/src
LDFLAGS += -L@top_builddir@/$(GLOG)/.libs

# Add sqlite to include and lib paths.
CXXFLAGS += -I@top_srcdir@/$(SQLITE)/src -I@top_builddir@/$(SQLITE)/src
LDFLAGS += -L@top_builddir@/$(SQLITE)/.libs

# Add included ZooKeeper to include and lib paths if necessary.
ifeq ($(WITH_INCLUDED_ZOOKEEPER),1)
  CXXFLAGS += -I@top_srcdir@/$(ZOOKEEPER)/include -I@top_srcdir@/$(ZOOKEEPER)/generated
  LDFLAGS += -L@top_builddir@/$(ZOOKEEPER)/.libs
endif

# Add dependency tracking to CFLAGS, CXXFLAGS.
CFLAGS += -MMD -MP
CXXFLAGS += -MMD -MP

# Add build date to CFLAGS, CXXFLAGS
CFLAGS += -DBUILD_DATE="\"$$(date '+%Y-%m-%d %H:%M:%S')\""
CXXFLAGS += -DBUILD_DATE="\"$$(date '+%Y-%m-%d %H:%M:%S')\""

# Add build user to CFLAGS, CXXFLAGS
CFLAGS += -DBUILD_USER="\"$$USER\""
CXXFLAGS += -DBUILD_USER="\"$$USER\""

# Add libev to LDFLAGS.
LDFLAGS += -L$(LIBEV)/.libs

# Add glog, libev, libprocess, pthread, and dl to LIBS.
LIBS += -lglog -lprocess -lev -lpthread -ldl -lsqlite3

# Add ZooKeeper if necessary.
ifeq ($(WITH_ZOOKEEPER),1)
  LIBS += -lzookeeper_st
endif

MASTER_OBJ = master/master.o master/allocator_factory.o master/simple_allocator.o

SLAVE_OBJ = slave/slave.o launcher/launcher.o slave/isolation_module.o	\
	    slave/process_based_isolation_module.o

ifeq ($(OS_NAME),solaris)
  SLAVE_OBJ += slave/solaris_project_isolation_module.o
endif

ifeq ($(OS_NAME),linux)
  SLAVE_OBJ += slave/lxc_isolation_module.o
endif

MASTER_WEBUI_OBJ = master/webui.o
MASTER_SWIG_WEBUI_OBJ = webui/master/swig/master_wrap.o

SLAVE_WEBUI_OBJ = slave/webui.o
SLAVE_SWIG_WEBUI_OBJ = webui/slave/swig/slave_wrap.o

WEBUI_OBJ = $(MASTER_WEBUI_OBJ) $(SLAVE_WEBUI_OBJ)
SWIG_WEBUI_OBJ = $(MASTER_SWIG_WEBUI_OBJ) $(SLAVE_SWIG_WEBUI_OBJ)

COMMON_OBJ = common/fatal.o messaging/messages.o common/lock.o		\
	     detector/detector.o common/params.o			\
	     detector/url_processor.o configurator/configurator.o	\
	     common/string_utils.o common/logging.o event_history/event_history.o

ifeq ($(WITH_ZOOKEEPER),1)
  COMMON_OBJ += detector/zookeeper.o
endif

EXEC_LIB_OBJ = exec/exec.o
SCHED_LIB_OBJ = sched/sched.o local/local.o

BASIC_OBJ = $(MASTER_OBJ) $(SLAVE_OBJ) $(COMMON_OBJ)  \
	    $(SCHED_LIB_OBJ) $(EXEC_LIB_OBJ)

ALL_OBJ = $(BASIC_OBJ) $(WEBUI_OBJ) $(SWIG_WEBUI_OBJ)

MASTER_EXE_OBJ = $(MASTER_OBJ) $(MASTER_WEBUI_OBJ)	\
                 $(MASTER_SWIG_WEBUI_OBJ) $(COMMON_OBJ)

SLAVE_EXE_OBJ = $(SLAVE_OBJ) $(SLAVE_WEBUI_OBJ)	\
                $(SLAVE_SWIG_WEBUI_OBJ) $(COMMON_OBJ)

LAUNCHER_EXE_OBJ = launcher/launcher.o $(COMMON_OBJ)

LOCAL_EXE_OBJ = local/local.o $(MASTER_OBJ) $(SLAVE_OBJ) $(COMMON_OBJ)

MESOS_MASTER_EXE = $(BINDIR)/mesos-master
MESOS_SLAVE_EXE = $(BINDIR)/mesos-slave
MESOS_LOCAL_EXE = $(BINDIR)/mesos-local
MESOS_LAUNCHER_EXE = $(BINDIR)/mesos-launcher
MESOS_GETCONF_EXE = $(BINDIR)/mesos-getconf
MESOS_PROJD_EXE = $(BINDIR)/mesos-projd

MESOS_EXES = $(MESOS_MASTER_EXE) $(MESOS_SLAVE_EXE) $(MESOS_LOCAL_EXE)	\
             $(MESOS_LAUNCHER_EXE) $(MESOS_GETCONF_EXE)

ifeq ($(OS_NAME),solaris)
  MESOS_EXES += $(MESOS_PROJD_EXE)
endif

MESOS_SCHED_LIB = $(LIBDIR)/libmesos_sched.a
MESOS_EXEC_LIB = $(LIBDIR)/libmesos_exec.a

# C/C++ shared library which contains both the scheduler and executor
# libraries, in addition to libglog, libprocess, and libev.
MESOS_LIB_OBJ = 
ifeq ($(OS_NAME),darwin)
  MESOS_LIB = $(LIBDIR)/libmesos.dylib
else
  MESOS_LIB = $(LIBDIR)/libmesos.so
endif

MESOS_LIBS = $(MESOS_LIB) $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB)

# Java and Python shared libraries which contain the everything in
# MESOS_LIB as well as the SWIG wrappers (note, Java requires the use
# of the .dylib suffix on Mac OS X, but at the time Python required
# the .so suffix even on Mac OS X).
ifeq ($(OS_NAME),darwin)
  MESOS_JAVA_LIB = $(LIBDIR)/java/libmesos.dylib
else
  MESOS_JAVA_LIB = $(LIBDIR)/java/libmesos.so
endif

MESOS_JAVA_JAR = $(LIBDIR)/java/mesos.jar

MESOS_PYTHON_LIB = $(LIBDIR)/python/_mesos.so

# We copy all the webui files into the bin directory.
WEBUI_FILES = $(BINDIR)/webui/bottle-0.8.3		\
              $(BINDIR)/webui/common/webui_lib.py	\
              $(BINDIR)/webui/master/framework.tpl	\
              $(BINDIR)/webui/master/index.tpl		\
              $(BINDIR)/webui/master/webui.py		\
              $(BINDIR)/webui/slave/framework.tpl	\
              $(BINDIR)/webui/slave/index.tpl		\
              $(BINDIR)/webui/slave/webui.py		\
              $(BINDIR)/webui/static/stylesheet.css

# We copy template config files into the conf directory.
CONF_FILES = $(CONFDIR)/mesos.conf

# We copy all the deploy scripts into the bin directory.
DEPLOY_FILES = $(DEPLOYDIR)/deploy-to-slaves             \
	       $(DEPLOYDIR)/mesos-daemon                 \
	       $(DEPLOYDIR)/mesos-env.sh                 \
	       $(DEPLOYDIR)/start-masters                \
	       $(DEPLOYDIR)/start-mesos                  \
	       $(DEPLOYDIR)/start-slaves                 \
	       $(DEPLOYDIR)/stop-masters                 \
	       $(DEPLOYDIR)/stop-mesos                   \
	       $(DEPLOYDIR)/stop-slaves                  \

# Create rules for building the directories that aren't created
# automagically by configure.
OBJ_DIRECTORIES = common configurator detector event_history exec launcher \
                  local	master messaging sched slave

WEBUI_DIRECTORIES = $(BINDIR)/webui/common $(BINDIR)/webui/master	\
                    $(BINDIR)/webui/slave $(BINDIR)/webui/static	\
                    $(BINDIR)/webui/master/swig				\
                    $(BINDIR)/webui/slave/swig

DIRECTORIES = $(BINDIR) $(LIBDIR) $(LIBDIR)/java $(LIBDIR)/python	\
              $(CONFDIR) $(DEPLOYDIR) $(OBJ_DIRECTORIES)		\
              $(WEBUI_DIRECTORIES)


default: all

-include $(patsubst %.o, %.d, $(ALL_OBJ))
-include $(patsubst %, %.d, $(MESOS_EXES))

$(DIRECTORIES): %:
	mkdir -p $@

$(BASIC_OBJ): %.o: @srcdir@/%.cpp | $(OBJ_DIRECTORIES)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

$(MESOS_LIBS): $(COMMON_OBJ) | $(LIBDIR)

$(MESOS_SCHED_LIB): $(SCHED_LIB_OBJ) $(MASTER_OBJ) $(SLAVE_OBJ)
	$(AR) rcs $@ $^

$(MESOS_EXEC_LIB): $(EXEC_LIB_OBJ)
	$(AR) rcs $@ $^

$(MESOS_LIB): $(SCHED_LIB_OBJ) $(MASTER_OBJ) $(SLAVE_OBJ) $(EXEC_LIB_OBJ)
	$(CXX) $(CXXFLAGS) -shared -o $@ $^ $(LDFLAGS) $(LIBS)

$(WEBUI_OBJ): %.o: @srcdir@/%.cpp
	$(CXX) -c $(CXXFLAGS) $(WEBUI_CXXFLAGS) -o $@ $<

$(SWIG_WEBUI_OBJ): %.o: %.cpp
	$(CXX) -c $(CXXFLAGS) $(WEBUI_CXXFLAGS) -o $@ $<

webui/master/swig/master_wrap.cpp: @srcdir@/webui/master/swig/master.i @srcdir@/master/state.hpp @srcdir@/master/webui.hpp @srcdir@/master/master.hpp config/config.hpp $(BINDIR)/webui/master/swig
ifeq ($(WITH_WEBUI),1)
	mkdir -p webui/master/swig
	$(SWIG) -c++ -python -outdir webui/master/swig -I@top_srcdir@/include -I@srcdir@ -o $@ $<
	cp -r webui/master/swig/master.py $(BINDIR)/webui/master/swig
else
	echo "" > $@
endif

webui/slave/swig/slave_wrap.cpp: @srcdir@/webui/slave/swig/slave.i @srcdir@/slave/state.hpp @srcdir@/slave/webui.hpp @srcdir@/slave/slave.hpp config/config.hpp $(BINDIR)/webui/slave/swig
ifeq ($(WITH_WEBUI),1)
	mkdir -p webui/slave/swig
	$(SWIG) -c++ -python -outdir webui/slave/swig -I@top_srcdir@/include -I@srcdir@ -o $@ $<
	cp -r webui/slave/swig/slave.py $(BINDIR)/webui/slave/swig
else
	echo "" > $@
endif

$(MESOS_EXES): | $(BINDIR)

$(MESOS_MASTER_EXE): @srcdir@/master/main.cpp $(MASTER_EXE_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(MASTER_EXE_OBJ) $(LDFLAGS) $(WEBUI_LDFLAGS) $(LIBS)

$(MESOS_SLAVE_EXE): @srcdir@/slave/main.cpp $(SLAVE_EXE_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(SLAVE_EXE_OBJ) $(LDFLAGS) $(WEBUI_LDFLAGS) $(LIBS)

$(MESOS_LAUNCHER_EXE): @srcdir@/launcher/main.cpp $(LAUNCHER_EXE_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< launcher/launcher.o $(COMMON_OBJ) $(LDFLAGS) $(LIBS)

$(MESOS_LOCAL_EXE): @srcdir@/local/main.cpp $(LOCAL_EXE_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(LOCAL_EXE_OBJ) $(LDFLAGS) $(LIBS)

$(MESOS_GETCONF_EXE): @srcdir@/configurator/get_conf.cpp $(COMMON_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(COMMON_OBJ) $(LDFLAGS) $(LIBS)

$(MESOS_PROJD_EXE): @srcdir@/slave/projd.cpp $(COMMON_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $< $(COMMON_OBJ) $(LDFLAGS) $(LIBS)

java: $(MESOS_JAVA_LIB) $(MESOS_JAVA_JAR)

python: $(MESOS_PYTHON_LIB)

$(MESOS_JAVA_JAR): $(MESOS_JAVA_LIB) | $(LIBDIR)/java
ifdef JAVA_HOME
	patch -N swig/java/mesos/mesosJNI.java < @srcdir@/swig/java/mesosJNI.java.patch1 || echo -n
	patch swig/java/mesos/mesosJNI.java < @srcdir@/swig/java/mesosJNI.java.patch2 || echo -n
	$(JAVA_HOME)/bin/javac -sourcepath swig/java -d swig/java swig/java/mesos/*.java
	$(JAVA_HOME)/bin/jar cf $@ -C swig/java mesos
endif

$(MESOS_JAVA_LIB): @srcdir@/swig/mesos.i $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB) | $(LIBDIR)/java
ifdef JAVA_HOME
	rm -f swig/java/mesos/*
	mkdir -p swig/java/mesos
	$(SWIG) -c++ -java -I@top_srcdir@/include -o swig/java/mesos_wrap.cpp -outdir swig/java/mesos -package mesos @srcdir@/swig/mesos.i
	$(CXX) $(CXXFLAGS) -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/$(OS_NAME) -shared -o $@ swig/java/mesos_wrap.cpp $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB) $(LDFLAGS) $(LIBS)
endif

$(MESOS_PYTHON_LIB): @srcdir@/swig/mesos.i $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB) | $(LIBDIR)/python
ifdef PYTHON_HEADERS
	mkdir -p swig/python
	$(SWIG) -c++ -python -threads -I@top_srcdir@/include -o swig/python/mesos_wrap.cpp -outdir swig/python @srcdir@/swig/mesos.i
	$(CXX) $(CXXFLAGS) -I$(PYTHON_HEADERS) -shared -o $@ swig/python/mesos_wrap.cpp $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB) $(LDFLAGS) $(PYTHON_LDFLAGS) $(LIBS)
	cp -r swig/python/mesos.py $(LIBDIR)/python/mesos.py
endif

$(WEBUI_FILES): $(BINDIR)/%: @srcdir@/% | $(WEBUI_DIRECTORIES)
ifeq ($(WITH_WEBUI),1)
	cp -r $< $@
endif

$(DEPLOY_FILES): $(DEPLOYDIR)/%: @srcdir@/deploy/% | $(DEPLOYDIR)
	cp -r $< $@

$(CONFDIR)/mesos.conf: @srcdir@/conf/mesos.conf.template | $(CONFDIR)
	cp -r $< $@

test: all
	$(MAKE) -C tests test

all: $(MESOS_LIBS) $(MESOS_EXES) java python $(WEBUI_FILES) $(CONF_FILES) $(DEPLOY_FILES)
	$(MAKE) -C examples
	$(MAKE) -C tests

clean:
	$(MAKE) -C examples clean
	$(MAKE) -C tests clean
	rm -f $(patsubst %.o, %.d, $(ALL_OBJ))
	rm -f $(patsubst %, %.d, $(MESOS_EXES))
	rm -rf $(patsubst %, %.dSYM, $(MESOS_EXES))
	rm -f $(ALL_OBJ)
	rm -f $(MESOS_EXES) $(MESOS_LIBS)
	rm -f $(MESOS_JAVA_JAR)
	rm -rf $(patsubst %.so, %.d, $(MESOS_JAVA_LIB))
	rm -rf $(patsubst %.dylib, %.d, $(MESOS_JAVA_LIB))
	rm -rf $(patsubst %.so, %.d, $(MESOS_PYTHON_LIB))
	rm -rf $(MESOS_JAVA_LIB).dSYM $(MESOS_PYTHON_LIB).dSYM
	rm -f $(MESOS_JAVA_LIB) $(MESOS_PYTHON_LIB)
	rm -rf $(WEBUI_FILES)
	rm -f swig/*/mesos_wrap.cpp
	rm -f swig/*/mesos_wrap.h
	rm -f swig/*/*.o
	rm -f swig/*/*.d
	rm -f swig/java/mesos/*
	rm -f swig/python/mesos.py
	rm -f $(LIBDIR)/python/mesos.py
	rm -f $(LIBDIR)/python/mesos.pyc
	rm -f webui/master/swig/master_wrap.h
	rm -f webui/master/swig/master_wrap.cpp
	rm -f webui/master/swig/master_wrap.o
	rm -f webui/master/swig/master_wrap.d
	rm -f webui/master/swig/master.py
	rm -f $(BINDIR)/webui/master/swig/master.py
	rm -f $(BINDIR)/webui/master/swig/master.pyc
	rm -f webui/slave/swig/slave_wrap.h
	rm -f webui/slave/swig/slave_wrap.cpp
	rm -f webui/slave/swig/slave_wrap.o
	rm -f webui/slave/swig/slave_wrap.d
	rm -f webui/slave/swig/slave.py
	rm -f $(BINDIR)/webui/master/swig/master.py
	rm -f $(BINDIR)/webui/master/swig/master.pc
	rm -f $(CONF_FILES)
	rm -f $(DEPLOY_FILES)
	rm -f TAGS

.PHONY: default java python test all clean
